// <auto-generated />
using System;
using HealthApp.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthApp.Server.Migrations
{
    [DbContext(typeof(MasterContext))]
    partial class MasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int")
                        .HasColumnName("Issue");

                    b.Property<int?>("IssueId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Issue");

                    b.HasIndex("IssueId");

                    b.ToTable("Analyses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            Issue = 1,
                            Value = "100"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Issue = 2,
                            Value = "200"
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.AnalysisConclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Analysis")
                        .HasColumnType("int");

                    b.Property<int>("Conclusion")
                        .HasColumnType("int");

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Analysis");

                    b.HasIndex("Conclusion");

                    b.HasIndex("Doctor");

                    b.ToTable("AnalysisConclusions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Analysis = 1,
                            Conclusion = 1,
                            Doctor = 1
                        },
                        new
                        {
                            Id = 2,
                            Analysis = 2,
                            Conclusion = 2,
                            Doctor = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Doctor");

                    b.HasIndex("Issue");

                    b.HasIndex("PreviousAppointmentId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Doctor = 1,
                            EndTime = new DateTime(2024, 1, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Issue = 1,
                            StartTime = new DateTime(2024, 1, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 2,
                            Doctor = 2,
                            EndTime = new DateTime(2024, 2, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Issue = 2,
                            StartTime = new DateTime(2024, 2, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.AppointmentComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CommentText = "Patient is responding well to treatment.",
                            CreatedAt = new DateTime(2024, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CommentText = "Follow-up required in 2 weeks.",
                            CreatedAt = new DateTime(2024, 2, 1, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            CommentText = "Blood test results pending.",
                            CreatedAt = new DateTime(2024, 2, 2, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Global = true,
                            Name = "Infection",
                            ReferenceValue = "Bacterial/Viral"
                        },
                        new
                        {
                            Id = 2,
                            Global = true,
                            Name = "Chronic",
                            ReferenceValue = "Diabetes, Hypertension"
                        },
                        new
                        {
                            Id = 3,
                            Global = false,
                            Name = "Acute",
                            ReferenceValue = "Surgery Required"
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Conclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Conclusions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IssueDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            IssueDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Doctor");

                    b.HasIndex("Issue");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Doctor = 1,
                            Issue = 1
                        },
                        new
                        {
                            Id = 2,
                            Doctor = 2,
                            Issue = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.DoctorsLicences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LicenceId");

                    b.ToTable("DoctorsLicences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            LicenceId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            LicenceId = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeadDoctor")
                        .HasColumnType("int");

                    b.Property<int>("Patient")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeadDoctor");

                    b.HasIndex("Patient");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No description provided",
                            LeadDoctor = 1,
                            Patient = 1,
                            Status = "Open"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No description provided",
                            LeadDoctor = 2,
                            Patient = 2,
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Licence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PracticesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticesId");

                    b.ToTable("Licences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2029, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PracticesId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2031, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PracticesId = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Patient", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PersonId = 1
                        },
                        new
                        {
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Practices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Practices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Practice = "General Medicine"
                        },
                        new
                        {
                            Id = 2,
                            Practice = "Pediatrics"
                        },
                        new
                        {
                            Id = 3,
                            Practice = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Practice = "Neurology"
                        },
                        new
                        {
                            Id = 5,
                            Practice = "Orthopedics"
                        },
                        new
                        {
                            Id = 6,
                            Practice = "Dermatology"
                        },
                        new
                        {
                            Id = 7,
                            Practice = "Psychiatry"
                        });
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diagnosis")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Medicine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Overturned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Diagnosis");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = 1,
                            Medicine = "Antibiotics",
                            Overturned = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnosis = 2,
                            Medicine = "Painkillers",
                            Overturned = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            Name = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1992, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            Name = "Jane",
                            Surname = "Smith"
                        });
                });

            modelBuilder.Entity("Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IssueId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.HasOne("Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("ApplicationUser", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Analysis", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Category", "CategoryNavigation")
                        .WithMany()
                        .HasForeignKey("Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Issue", "IssueNavigation")
                        .WithMany()
                        .HasForeignKey("Issue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Issue", null)
                        .WithMany("Analyses")
                        .HasForeignKey("IssueId");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("IssueNavigation");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.AnalysisConclusion", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Analysis", "AnalysisNavigation")
                        .WithMany("AnalysisConclusions")
                        .HasForeignKey("Analysis")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Conclusion", "ConclusionNavigation")
                        .WithMany("AnalysisConclusions")
                        .HasForeignKey("Conclusion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "DoctorNavigation")
                        .WithMany()
                        .HasForeignKey("Doctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnalysisNavigation");

                    b.Navigation("ConclusionNavigation");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Appointment", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "DoctorNavigation")
                        .WithMany()
                        .HasForeignKey("Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Issue", "IssueNavigation")
                        .WithMany()
                        .HasForeignKey("Issue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Appointment", "PreviousAppointment")
                        .WithMany()
                        .HasForeignKey("PreviousAppointmentId");

                    b.Navigation("DoctorNavigation");

                    b.Navigation("IssueNavigation");

                    b.Navigation("PreviousAppointment");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.AppointmentComment", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Appointment", "Appointment")
                        .WithMany("Comments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Diagnosis", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "DoctorNavigation")
                        .WithMany()
                        .HasForeignKey("Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Issue", "IssueNavigation")
                        .WithMany()
                        .HasForeignKey("Issue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorNavigation");

                    b.Navigation("IssueNavigation");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Doctor", b =>
                {
                    b.HasOne("Person", "Person")
                        .WithOne()
                        .HasForeignKey("HealthApp.Server.Models.DatabaseModels.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.DoctorsLicences", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "Doctor")
                        .WithMany("DoctorsLicences")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Licence", "Licence")
                        .WithMany("DoctorsLicences")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Issue", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "LeadDoctorNavigation")
                        .WithMany()
                        .HasForeignKey("LeadDoctor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Patient", "PatientNavigation")
                        .WithMany()
                        .HasForeignKey("Patient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LeadDoctorNavigation");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Licence", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Practices", "Practices")
                        .WithMany("Licences")
                        .HasForeignKey("PracticesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Practices");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Patient", b =>
                {
                    b.HasOne("Person", "PersonNavigation")
                        .WithOne()
                        .HasForeignKey("HealthApp.Server.Models.DatabaseModels.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Prescription", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Diagnosis", "DiagnosisNavigation")
                        .WithMany()
                        .HasForeignKey("Diagnosis")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recommendation", b =>
                {
                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthApp.Server.Models.DatabaseModels.Issue", "Issue")
                        .WithMany("Recommendations")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.ApplicationUserRole", b =>
                {
                    b.HasOne("ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Analysis", b =>
                {
                    b.Navigation("AnalysisConclusions");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Appointment", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Conclusion", b =>
                {
                    b.Navigation("AnalysisConclusions");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Doctor", b =>
                {
                    b.Navigation("DoctorsLicences");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Issue", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Licence", b =>
                {
                    b.Navigation("DoctorsLicences");
                });

            modelBuilder.Entity("HealthApp.Server.Models.DatabaseModels.Practices", b =>
                {
                    b.Navigation("Licences");
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
